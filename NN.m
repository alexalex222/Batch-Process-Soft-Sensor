% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
% Created Wed Aug 08 22:00:48 EDT 2012
%
% This script assumes these variables are defined:
%
%   bdb_train_X - input data.
%   bdb_train_Y - target data.

clear all;
close all;
clc;

X_Vars = [10,11,13,14];
Y_Vars = [1:5,15,16];

load('Train.mat');
% bdb([181,362,543,724,905,1086,1267,1448,1629,1810],:) = [];
bdb_train_X_all = bdb(:,X_Vars);
bdb_train_Y_all = bdb(:,Y_Vars);
load('Test.mat');
bdb_test_X_all = bdb([1:181]+181*2,X_Vars);
bdb_test_Y_all = bdb([1:181]+181*2,Y_Vars);
samples = repmat(1:1:181,1,10);
samples_test = 1:1:181;
Time = {1:30,31:106,107:181};
Y_Act = bdb_test_Y_all;
P_dum = cell(1,length(Y_Vars));

for i_iter = 1:1:numel(Y_Vars)
    for j_iter = 1:1:numel(Time)
        
        bdb_train_X = bdb_train_X_all(ismember(samples,Time{j_iter}),:);
        bdb_train_Y = bdb_train_Y_all(ismember(samples,Time{j_iter}),i_iter);
        
        inputs = bdb_train_X';
        targets = bdb_train_Y';
        
        % Create a Fitting Network
        hiddenLayerSize = 10;
        net = fitnet(hiddenLayerSize);
        
        
        % Setup Division of Data for Training, Validation, Testing
        net.divideParam.trainRatio = 70/100;
        net.divideParam.valRatio = 15/100;
        net.divideParam.testRatio = 15/100;
        
        
        % Train the Network
        [net,tr] = train(net,inputs,targets);
        
        % Test the Network
        outputs = net(inputs);
        errors = gsubtract(targets,outputs);
        performance = perform(net,targets,outputs);
        
        testinputs = bdb_test_X_all(ismember(samples_test,Time{j_iter}),:)';
        
        outputs = sim(net,testinputs);
        
        P_dum{i_iter} = [P_dum{i_iter},outputs];
        
        % View the Network
        % view(net)
        
        % Plots
        % Uncomment these lines to enable various plots.
        % figure, plotperform(tr)
        % figure, plottrainstate(tr)
        % figure, plotfit(net,inputs,targets)
        % figure, plotregression(targets,outputs)
        % figure, ploterrhist(errors)
        
        clc;
        
    end
end

for iter = 1:1:length(Y_Vars)
    P(:,iter) = P_dum{iter}';
end

error = Y_Act - P;

for iter = 1:1:length(Y_Vars)
    rmse(iter) = sqrt(mse(error(:,iter)));
    mape(iter) = mean(abs(error(:,iter))./Y_Act(:,iter))*100;
    r2(iter) = 1-(sum((P(:,iter)-Y_Act(:,iter)).^2)/sum((Y_Act(:,iter)-mean(Y_Act(:,iter))).^2));
end

Tags = {'C_A (mol/L)','C_C (mol/L)','C_L (mol/L)','C_W (mol/L)','C_{SE} (mol/L)','MW (g/mol)','NH_2 (mol/g)'};
Titles = {'(a)','(b)','(c)','(d)','(e)','(f)','(g)'};

timings = 0:1:180;

figure;
for iter = 1:1:length(Y_Vars)
    subplot(2,4,iter);
    hold on;
    plot(timings,Y_Act(:,iter), 'Color',rgb('Blue'),'LineWidth',3.0);
    plot(timings,P(:,iter), '.','Color',rgb('Red'),'LineWidth',1.0);
    set(gca,'XTick',[0,60,120,180]);
    set(gca,'XTickLabel',['0';'1';'2';'3']);
    xlabel('Time (h)');
    ylabel(Tags{iter});
    title(Titles(iter));
    %     if any(iter == [1,2,4,7])
    %         legend('Actual','Predicted',1);
    %     else
    %         legend('Actual','Predicted',4);
    %     end
    axis tight;
    ylim auto;
end
subplot(2,4,8,'Color','None');
hold on
h1 = plot(timings,Y_Act(:,iter), 'Color',rgb('Blue'),'LineWidth',3.0);
h2 = plot(timings,P(:,iter), '.','Color',rgb('Red'),'LineWidth',1.0);
h = legend('Actual','Predicted',4);
set(h,'Color','w');
axis('off');
set(h1,'Visible','Off');
set(h2,'Visible','Off');

saveas(gcf,['Results\NN'],'fig');
maximize;
applytofig(gcf, 'width',8, 'height',8, 'color','rgb', 'resolution',1800, 'bounds','tight');
set(gcf, 'Renderer', 'painters');
saveas(gcf,['Results\NN'],'png');
saveas(gcf,['Results\NN'],'epsc');
close all;

figure;
boxplot(error,'notch','on')
xlabel('Variable No.');
ylabel('Residuals');

saveas(gcf,['Results\NNe'],'fig');
maximize;
applytofig(gcf, 'width',8, 'height',8, 'color','rgb', 'resolution',1800, 'bounds','tight');
set(gcf, 'Renderer', 'painters');
saveas(gcf,['Results\NNe'],'png');
saveas(gcf,['Results\NNe'],'epsc');
close all;

save('Results\NN.mat')